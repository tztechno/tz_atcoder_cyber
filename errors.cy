##################################################
WHAT WAS IMPOSSIBLE....... TO BE RESOLVED.........
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
##################################################
Thanks for providing readfq2. 
It helped me narrow down the perf bottleneck quickly. 
readLine was meant for getting the user input from the command line 
and not bulk reads from stdin. 
For that reason, I deprecated readLine in favor of getInput. 
As for bulk reads on std.in you can do the following now in readfq2:
##################################################
[error] v0.2
--------------------------------------------   
t = readLine()
print '{t}'
[error]
--------------------------------------------    
readLine is deprecated since 0.1: Use getInput() instead.
panic: error.EndOfStream
/judge/Main.cy:2:5 main:
t = readLine()
    ^
##################################################
[error]
--------------------------------------------    
panic: error.EndOfStream
/judge/Main.cy:2:5 main:
t = getInput()
    ^
--------------------------------------------   
t = getInput()
print '{t}'
##################################################
[error]
--------------------------------------------    
panic: error.EndOfStream
/judge/Main.cy:2:5 main:
v = getInput().utf8().split(' ')
    ^
--------------------------------------------    
v = getInput().utf8().split(' ')
n = int(v[0])
w = int(v[1])
t = int(n/w)
print '{t}'
##################################################
